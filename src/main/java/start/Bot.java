package start;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.CallbackQuery;
import com.pengrad.telegrambot.model.InlineQuery;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.model.request.InlineQueryResultArticle;
import com.pengrad.telegrambot.request.*;


public class Bot {

    private final TelegramBot bot = new TelegramBot(System.getenv("BOT_TOKEN"));
    private final String PROCESSING_LABEL = "Processing...";


    public void serve() {
        //–ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ª–∏—Å—Ç–µ–Ω–µ—Ä –∏ —ç—Ç–æ—Ç –ª–∏—Å—Ç–µ–Ω–µ—Ä –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–π 100 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∞–ø–∏
        //–ª—é–±–æ–π —ç–∫—à–µ–Ω –±—É–¥–µ—Ç —Ä–µ–∞–∫—Ü–∏—è –∏ –ø—Ä–∏–ª–µ—Ç–∞—Ç—å —Å—é–¥–∞
        bot.setUpdatesListener(updates -> {
            //–ø–æ—à—Ç—Ä—É—á–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤—ã–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å
            updates.forEach(this::process);
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }

    private void process(Update update) {
        //–ø–æ–ª—É—á–∏–ª–∏
        Message message = update.message();
        CallbackQuery callbackQuery = update.callbackQuery();
        InlineQuery inlineQuery = update.inlineQuery();

        BaseRequest request = null; //—Å—é–¥–∞ –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç

        //–¥–ª—è –∫–Ω–æ–ø–∫–∏
        //–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –º–µ—Å—Å–µ–¥–∂ —É –Ω–∞—Å –Ω–∞–ø–∏—Å–∞–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        if (message != null && message.viaBot() != null && message.viaBot().username().equals("gameBonya_bot")) {
            InlineKeyboardMarkup replyMarkup = message.replyMarkup();
            if( replyMarkup == null) {
                return;
            }
            InlineKeyboardButton[][] buttons = replyMarkup.inlineKeyboard();
            if (buttons == null) {
                return;
            }
            String senderChose = buttons[0][0].text();

            if (!senderChose.equals(PROCESSING_LABEL)) {
                return;
            }

            Long chatId = message.chat().id();
            String senderName = message.from().firstName();
            Integer messageId = message.messageId();

            //–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            new EditMessageText(chatId, messageId, message.text())
                    .replyMarkup(
                            new InlineKeyboardMarkup(
                                    new InlineKeyboardButton("ü§è")
                                            .callbackData(String.format("%d %s %s %s", chatId, senderName, senderChose, "0")),
                                    new InlineKeyboardButton("‚úå")
                                            .callbackData(String.format("%d %s %s %s", chatId, senderName, senderChose, "1")),
                                    new InlineKeyboardButton("‚úä")
                                            .callbackData(String.format("%d %s %s %s", chatId, senderName, senderChose, "2"))

                            )

                    );


        } else if (inlineQuery != null) {
            InlineQueryResultArticle paper = buildInbutton("paper", "\uD83E\uDD0F Paper", "0");
            InlineQueryResultArticle scissors = buildInbutton("scissors", "‚úåÔ∏èScissors", "1");
            InlineQueryResultArticle rock = buildInbutton("rock", "‚úä Rock ", "2");

            request = new AnswerInlineQuery(inlineQuery.id(), paper, scissors, rock);


        } else if (message != null) {
            long chatId = update.message().chat().id();
            request = new SendMessage(chatId, "Hello");
        }



        //—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—à–µ–¥—à–∏–µ –∏–∑ –Ω–µ–≥–æ
        if (request != null) {
            bot.execute(request);
        }



    }

    private InlineQueryResultArticle buildInbutton(String id, String title, String callbackData) {
        return new InlineQueryResultArticle(id, title, "I'm ready to fight")
                //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                .replyMarkup(
                        new InlineKeyboardMarkup(
                                new InlineKeyboardButton(PROCESSING_LABEL).callbackData(callbackData)
                        )
                );
    }


}
